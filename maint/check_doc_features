#!/bin/bash

set -euo pipefail

MAINT=$(dirname "$0")

# annotation is provided in a way this script doesn't understand
declare -A provided
provided=()
# annotation is required for reasons this script doesn't understand
declare -A additional_required
additional_required=()

# PreferredRuntime has a somewhat more complexe rule for existing
provided[tor-rtcompat]='
PreferredRuntime:all(feature = "native-tls")
PreferredRuntime:all(feature = "rustls", not(feature = "native-tls"))
PreferredRuntime:feature = "native-tls"
PreferredRuntime:all(feature = "rustls", not(feature = "native-tls"))
'

# Sha1 is present both ways
provided[tor-llcrypto]='
Sha1:feature = "with-openssl"
Sha1:not(feature = "with-openssl")
'

additional_required[tor-llcrypto]='
aes:all()
aes:all()
'

# This is an * include; corresponding elements added to additional_required
provided[tor-proto]='
*:feature = "testing"
'

additional_required[tor-proto]='
CtrlMsg:feature = "testing"
CreateResponse:feature = "testing"
'

# This is detected two times, but only on cfg_attr(docsrs) is enough
provided[tor-netdoc]='
Nickname:feature = "dangerous-expose-struct-fields"
NsConsensusRouterStatus:feature = "ns_consensus"
'

for crate in $("$MAINT/list_crates"); do
    echo "checking $crate"
    required=$( (find "crates/$crate" -type f -name '*.rs' -exec awk '
      /^\s*pub use/ {
        match($0, /^\s*pub use.*[ :]([^: ]+)(;| \{)/, arr)
        itemName = arr[1]
        if(cfg != "") {
          print itemName ":" cfg
        }
      }

      {
        match($0, /#\[cfg\((.*)\)\]/, arr)
        if(arr[1] != "") {
          cfg = arr[1]
        } else {
          cfg = ""
        }
      }
    ' '{}' \;;echo "${additional_required["$crate"]:-}") | sed '/^$/d' | sort)

    found=$( (find "crates/$crate" -type f -name '*.rs' -exec awk '
      /(struct|enum|mod|trait) / {
        match($0, /(struct|enum|mod|trait) (\w*)(<.*>)?( \{|\()/, arr)
        itemName = arr[2]
        if(cfg != "") {
          print itemName ":" cfg
        }
      }
      {
        match($0, /#\[cfg_attr\(docsrs, doc\(cfg\((.*)\)\)\)\]/, arr)
        if(arr[1] != "") {
          cfg = arr[1]
        } else if (!/^\s*#\[/) {
          cfg = ""
        }
      }
    ' '{}' \;; echo "${provided["$crate"]:-}") | sed '/^$/d' | sort)

    comm -23 <(echo "$required") <(echo "$found") | sed 's/^/feature but no cfg_attr(docsrs):/'
    comm -13 <(echo "$required") <(echo "$found") | sed 's/^/cfg_attr(docsrs) but no feature:/'
    if comm -3 <(echo "$required") <(echo "$found") | grep -q '^' ; then
        echo "difference found"
        exit 1
    fi
done
